# syntax = docker/dockerfile:experimental
#
# Following comments have been shamelessly copied from https://github.com/pytorch/pytorch/blob/master/Dockerfile
#
# NOTE: To build this you will need a docker version > 18.06 with
#       experimental enabled and DOCKER_BUILDKIT=1
#
#       If you do not use buildkit you are not going to have a good time
#
#       For reference:
#           https://docs.docker.com/develop/develop-images/build_enhancements/

ARG BASE_IMAGE=ubuntu:rolling
ARG BUILD_TYPE=dev
ARG INTERMEDIATE_IMAGE=jwkaguya/torchserve-base:latest-gpu
FROM ${INTERMEDIATE_IMAGE} AS compile-image

ARG BASE_IMAGE
ARG BRANCH_NAME=dev
ARG CUDA_VERSION

ARG PYTHON_VERSION=3.9

ENV PYTHONUNBUFFERED TRUE

RUN python$PYTHON_VERSION -m venv /home/venv
RUN git pull
RUN python ts_scripts/install_from_src.py

# Final image for production
FROM ${BASE_IMAGE} AS runtime-image

ARG PYTHON_VERSION
ENV PYTHONUNBUFFERED TRUE

RUN --mount=type=cache,target=/var/cache/apt \
    apt-get update && \
    apt-get upgrade -y && \
    apt-get install software-properties-common -y && \
    add-apt-repository -y ppa:deadsnakes/ppa && \
    apt remove python-pip  python3-pip && \
    DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \
    python$PYTHON_VERSION \
    python3-distutils \
    python$PYTHON_VERSION-dev \
    python$PYTHON_VERSION-venv \
    # using openjdk-17-jdk due to circular dependency(ca-certificates) bug in openjdk-17-jre-headless debian package
    # https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1009905
    openjdk-17-jdk \
    build-essential \
    && rm -rf /var/lib/apt/lists/* \
    && cd /tmp

RUN useradd -m model-server \
    && mkdir -p /home/model-server/tmp

COPY --chown=model-server --from=compile-image /home/venv /home/venv

ENV PATH="/home/venv/bin:$PATH"

COPY dockerd-entrypoint.sh /usr/local/bin/dockerd-entrypoint.sh

RUN chmod +x /usr/local/bin/dockerd-entrypoint.sh \
    && chown -R model-server /home/model-server

COPY config.properties /home/model-server/config.properties
RUN mkdir /home/model-server/model-store && chown -R model-server /home/model-server/model-store

EXPOSE 8080 8081 8082 7070 7071

USER model-server
WORKDIR /home/model-server
ENV TEMP=/home/model-server/tmp
ENTRYPOINT ["/usr/local/bin/dockerd-entrypoint.sh"]
CMD ["serve"]

# # Build CodeBuild Image
# FROM compile-image AS codebuild-image
# ENV JAVA_VERSION=17 \
#   JAVA_HOME="/usr/lib/jvm/java-17-openjdk-amd64" \
#   JDK_HOME="/usr/lib/jvm/java-17-openjdk-amd64" \
#   JRE_HOME="/usr/lib/jvm/java-17-openjdk-amd64" \
#   ANT_VERSION=1.10.3 \
#   MAVEN_HOME="/opt/maven" \
#   MAVEN_VERSION=3.5.4 \
#   MAVEN_CONFIG="/root/.m2" \
#   MAVEN_DOWNLOAD_SHA1="22cac91b3557586bb1eba326f2f7727543ff15e3"

# # Install Maven
# RUN set -ex \
#   && mkdir -p $MAVEN_HOME \
#   && curl -LSso /var/tmp/apache-maven-$MAVEN_VERSION-bin.tar.gz https://apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz \
#   && echo "$MAVEN_DOWNLOAD_SHA1 /var/tmp/apache-maven-$MAVEN_VERSION-bin.tar.gz" | sha1sum -c - \
#   && tar xzvf /var/tmp/apache-maven-$MAVEN_VERSION-bin.tar.gz -C $MAVEN_HOME --strip-components=1 \
#   && update-alternatives --install /usr/bin/mvn mvn /opt/maven/bin/mvn 10000 \
#   && mkdir -p $MAVEN_CONFIG

# FROM ${BUILD_TYPE}-image AS final-image
# ARG BUILD_TYPE
# RUN echo "${BUILD_TYPE} image creation completed"
